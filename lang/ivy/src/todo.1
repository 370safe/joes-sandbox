Things I'm not so sure about:


	1.
		a.x()    a will be the x's mom

	When we call a closure, we set the mom to a

	The closure itself is modified.. maybe we don't really need a
	closure here since we're providing the environent.

	If we return a function from within a function:
		fn foo() {
			var x = 10
			return fn((), print(x))
		}

		z = foo()

		z	<- now the closure actually matters.
		q=[`mom=this, `x=20, `b=z]
		q.b	<- prints 20
		z	<- prints 20 because we modified the closure..  it
			should still print 10.

	2. we now allow fn a.b.c() { }
		The problem is that we're calling the generic code generator
for the left side of ().  So something like fn 10() { } is valid syntax (but
will say invalid l-value at run time).  Hmm.. this might all be ok.


Object oriented features:

	Function declarations can now have a path:
		fn a.b() ...

		Create member function b within object a.

		Otherwise we had to do this: a.b = fn((), { })

	We already have this:
		a.x()    a will be the x's mom

	Add a way to explicitly set the environment during a function
	call:
		javascript has z.a.call(n,...)
			(a is called with mom set to b instead of z)
			(not really mom: it's self)

		It turns out we have it:
			a = somefunc(`mom=someobj)

		Or in the function itself:
			fn somefunc() {
				mom=someobj
				return this
			}

	Using this technique, glblvars always ends up in the search path. 
	This is OK, it's like C++.

Loading:

->	Add Lua like loadstring and loadfile... make module system out of
	this.

Debug:

->	Print line number or better line when there are errors

->	Also print stack trace with function name and line references

C interface:

	Make it as easy as possible

	Store C data and pointers, like FILEs

Thunks:

	Thunks should not have their own scope for speed and because
	it's not obvious how many mom's you need for scope resolution.
	[done]

->	Add a way to explicitly set the environment during a function
	call:

		z = &x++
		test = [`x=3]
		z(`mom=test)	# <- works, but what about for '*' syntax?

	For thunks, should it be setting 'this'?  They are not supposed
	to have their own scope.

	But 'this' is magic...
