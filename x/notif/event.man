Name
	Event - Notif event processing and utility functions

Syntax
	#include <notif.h>

    Event processing

	void izws(void);	/* Initialize windowing system */
	int ws(void);		/* Handle pending windowing system events */
	void wsflsh(void);	/* Flush windowing system output */

	void doevent(Lith *root,XEvent *ev);
				/* Send an event to ourselves */

	int userevent(Widget *x,XEevent *ev);
				/* Event handler for ButtonPress,
				   ButtonRelease, MotionNotify and KeyPress
				   events */

	extern Display *dsp;	/* Primary display */

	extern XEvent ev;	/* Current event */

   Notif defined event codes

	#define Trigger (LASTEvent)
	#define Reset (LASTEvent+1)

   Modal dialog management

	void modal(Widget *w);		/* Restrict input to one widget */
	void modalpop();		/* Pop */

   Grab management

	extern Widget *grabber;		
	extern int greedy;
	void grab(Widget *,int flg);	/* Grab input for widget */
	void greedygrab(int flg);	/* Change grab type */
	void popgrab();			/* Revert to previous grab */
	void zapgrab();			/* Pop one grab */
	void zapto(Widget *);		/* Pop grabs */
	void grabunwind();		/* Zap all grabs */

   Default colors for new widgets

	extern GC stdbknd;	/* Default background color */
	extern GC stdfgnd;	/* Default foreground color */
	extern GC stdtopbknd;	/* Default 3d effect top color */
	extern GC stdborderbknd;/* Default border background color */
	extern GC stdshadowbknd;
	extern GC stdshadowtop;
	extern GC stdshadowbot;
	extern GC stdoutline;

   Utility functions

     Query widget hierarchy

	Widget *gttop(Widget *);	/* Find top-most widget of hierarchy */
	void abspos(Lith *w,int *x,int *y);
					/* Calc. x/y root position */

     Query X server

	Window calcmom(Window win);	/* Query X server for parent of win */
	void calcpos(Window win,int *x,int *y);
					/* Query for x/y root position */
	void calcpointer(void);		/* Redirect event to org window */

     Dialog window placement

	void placedialog(Widget *cur,Widget *new);
					/* Place dialog window */

     Focus information

	extern Widget *whofocus;	/* Who has focus */
	extern int focusflg;		/* Set if our X-client has focus */

     Key state definitions

	#define MouseLeft 256
	#define MouseMiddle 512
	#define MouseRight 1024
	#define MouseShift
	#define MouseCtrl
	#define MouseAlt

     Key codes for mouse events

	#define XK_Press1
	#define XK_Press2
	#define XK_Press3
	#define XK_Release1
	#define XK_Release2
	#define XK_Release3
	#define XK_Motion

Description

How to make C into an object oriented language

	Each object is composed of two structures.  One is the variable,
per-object structure.  Each object of the same class has one of these
structures, and it is allocated with malloc().  When we refer to an object,
we usually mean this structure's address.  One of the members of this
structure (called 'func'), points to the other structure- the per-class
structure.  Each class has one of these structures, usually allocated as
static data (I.E., as a global variable: malloc is not used).  Each object
of a class points to that class's per-class structure.  The per-object
structure contains data which may be different for each object, such as
screen x/y position.  The per-class structure contains data which depends
only on class, such as event handler function pointers and other so-called
member functions.

	Member functions could be called with C pointer operators as
follows (supposing x is a pointer to an object):

	x->funcs->rm(x);	/* Delete object */

	Note that the first argument for every member function is always the
object's address (it's equivalent to the C++ 'this' pointer).  It would
quickly become very tiring to have to use so many pointer operators every
time we wanted to call a member function, so a shorthand is called for.  C++
provides a convient shorthand for calling member functions:

	x->rm();

	This will not work in C, so instead we define a "polymorphic
function dispatch macro" for every member function (except event handlers,
which are not typically called directly by the programmer).  These macros
are all defined in notif.h.  The one for 'rm' is as follows:

	#define rm(x) ((x)->funcs->rm(x))

	These macros make calling a member function look like calling a
any normal function:

	rm(x);			/* Delete object */


	Incidentally, there is always a member function called 'rm' defined
for each class for the purpose of disposing of objects of that class.

	The per-object and per-class structures are not defined directly. 
Instead, macros are used to defined the contents of these structures, and
the structures are defined by refering to these macros.  For example, these
macros define the class Foo:

	typedef struct foovars Foo;

        /* Per class structure members */
	#define FOOFUNCS \
	  void (*rm)(); \
	  void (*st)(); \
	  void (*gt)();

	/* Per object structure member */
	#define FOOVARS \
	  int x; \
	  int y; \

	extern struct foofuncs { FOOFUNCS } foofuncs;
						/* per-class structure */

	struct foovars { struct foofuncs *funcs; FOOVARS };
						/* per-object structure */

	The purpose of defining these structures in this unusual way is to
provide a simple single-inheritance scheme.  Lets say we want to define a
class Bar which is to inherit Foo.  Bar must have all the same structure
members as Foo in the same places, so that a Bar object can pass for a Foo
object to code which doesn't know otherwise.  This is simply done by naming
the Foo macro as the first element of each of the Bar macros:

	typedef struct barbars Bar;

	#define BARFUNCS \
	  FOOFUNCS \
	  void (*clr)();

	#define BARVARS \
	  FOOVARS \
	  int z;

	extern struct barfuncs { BARFUNCS } barfuncs;
						/* per-class structure */

	struct barvars { struct barfuncs *funcs; BARVARS };
						/* per-object structure */

	Note that the only per-object member which does not go in the VARS
macro is the 'funcs' pointer.  We always want the 'funcs' pointer's type to
match the per-class structure so that we can see all of the member functions
through this pointer without the need for any casting.

	Each class has a "constructor" function for creating an object of
that class.  Because a class might want to call the constructor function of
a class which it inherits, the constructor itself can not do the actual
malloc for the object (the constructor from the inherited class would not
allocate enough space for the inheriting class).  The programmer must
therefore call malloc:

	Bar *x=mkBar(malloc(sizeof(Bar)));

	This can get tedious, so a macro in notif.h is provided to shorten it:

	Bar *x=mk(Bar);		/* Construct a Bar object */

	The constructor function is a good place to initialize the per-class
structure for that class.  For example, the constructor for Bar might look
like this:

	struct barfuncs barfuncs;	/* The Per-class structure */
	
	static bargt(x)			/* Member functions */
        Bar *x;
	 {
	 }

        static barclr(x)
        Bar *x;
         {
         }

	/* Minimal constructor function */
	Bar *mkBar(x)
	Bar *x;
	 {
	 mkFoo(x);		/* Initialize inherited per-object variables */
	 if(!barfuncs.rm)	/* Init. per-class variables if not done */
	  {
	  memcpy(&barfuncs,&foofuncs,sizeof(struct foofuncs));
	  			/* Inherit Foo's per-class members by copying */
          barfuncs.clr=barclr;	/* Initialize our new member */
          barfuncs.gt=bargt;	/* Change inherited member to one of our own */
	  }
	 x->funcs= &barfuncs;	/* Change funcs ptr to our per-class struct */
	 x->z;			/* Initialize our per-object variables */
	 return x;	/* Return the object */
	 }

	One final note about object oriented C:  sometimes it becomes
necessary to call an inherited class's member functions, even though they
have been replaced.  For example, the 'gt' member function was replaced in
Bar above.  If you want to call the original 'gt' member function from Foo
on an object of class Bar, you can not use the polymorphic function dispatch
macro:

	gt((Foo *)x);		/* Does not work! */

	Instead you must refer to Foo's per-class structure directly and use
parenthasis to prevent invokation of the dispatch macro:

	(foofuncs.gt)(x);	/* This works */

	This trick is most often used in replacement member functions such
as 'bargt' in Bar.  Perhaps 'bargt' wants the same behaviour as 'foogt', but
with only a minor change at the beginning or end.  It could do this by
calling foogt:

	static bargt(x)
	Bar *x;
	 {
	 (foofuncs.gt)(x);	/* Same as foogt */
	 ++x->z;		/* Plus this */
	 }

Object oriented C in Notif

	The base class for all Notif objects is Lith.  Both the Widget and
the Wind class inherit Lith.  Anything which inherits Lith can receive
events, contain other objects, have a placement manager for controlling the
positioning of other objects and have a screen position and size.  See
widget.man and lith.h for a fuller description of these properties.

	Notif programs create containment hierarchies of Widgets which
correspond to X windows displayed on the screen.  For example, the main
application widget will contain menu bar widgets, and menu bar widgets
contain menu entry widgets and so on.  Now Widgets in notif (see widget.man)
are themselves composed of 1-3 Winds (Winds are Liths with an associated X
window).  A typical stand alone button widget is composed of a Wind for
drawing the contents of the button, and a border Wind for pretty shadow
effects.  Each Wind corresponds to an actual X window (each has a Window
ID), and since Wind inherits Lith, they can contain other Winds.  Thus in
addition to the apparent hierarchy of Widgets, there is also a hidden
parallel hierarchy of Winds.  This is important to understand when you are
trying to search the hierarchy for a matching Window ID.  The Wind hierachy
must be searched, since that is what directly corresponds to actual X
windows.  Once you have the Wind, you can usually find the corresponding
Widget by looking at the 'target' member of the Wind's per-object structure.

Event delivery

	ws() flushes output and then if there are any pending X events,
delivers them to notif widgets.  For the simplest case (for an Expose event
for example), the process works as follows.  The X-event to be delivered is
placed in the global variable 'ev'. ws() then looks up the corresponding
Wind object for the Window number given in 'ev' (notif maintains an XContext
database of Window to Wind equivalents).  Next, ws() checks the Wind
object's target variable.  If it is set and there is no event handler
defined (if the event function pointer is NULL) for the event in Wind, the
event will be delivered to the target Lith instead of the actual Wind.  This
is used to redirect events from the componant Winds which make up a widget
to the widget itself.  Remember that this only happens if the Wind did
define an event handler for the particular event being delivered: for
example Shadow border objects do define an Expose event handler, so Expose
events for the Border will actually be delivered to the Border, not the
Widget.  Finally, the event handler is called as follows:

	int handler(Lith *x,XEvent *ev);

	Where: x is the object receiving the event (if the event was
	redirected from a Wind to a widget, x will be the widget's address).

	ev is the address of XEvent (usually the address of the global
	variable 'ev').

	The per-class structure for Widgets and Winds contains a function
pointer entry for each X Event.  The names for these functions are simply
the X name for the event in all lower case.  So the Expose event is called
'expose' in the per-class structure.

	If you create your own widget and want to be able to capture a
particular X event, you must inherit the standard Widget and set the
corresponding function pointer entry in the new per-class structure from
within the constructor function to point to your event handler.

Userevent

	The default event handler for Widget for the ButtonPress,
ButtonRelease, MotionNotify and KeyPress events is userevent().  This
function translates these events into calls to the member function 'user'
and basically makes button presses have the same format as keypresses.  In
addition, userevent provides for parents to intercept these events before
they are delivered to their kids.  Userevent will search all of the
destination Widget's parents, from root upward and call each non-NULL 'user'
function until one returns with a zero result.  Thus it is up to the parent
to decide if any particular event is to be delivered to a child.

	'user' is called as follows:

	int user(Widget *x,int key,int xbuttonstate,int x,int y,Time time,
		 Widget *org);

	Where: x is the widget receiving the event
	       key is the key code.  mouse clicks and motion are translated
	         into XK_Press1 - XK_Press3, XK_Release1 - XK_Release3 and
	         XK_Motion.
	       xbuttonstate contains the shift key status and mouse button
		 status (I.E., MouseLeft, MouseMiddle, MouseRight,
		 MouseShift, MouseCtrl, and MouseAlt).
	       x, y and time give the position of the mouse click or
		 keypress.
	       org is the original destination of the event before it was
		 intercepted by the parent.

	The default function for 'user' provided by Widget is widgetuser().
This function provides basic focus handling (where the tab key switches
which widget receives key press events).  Also it sends the event to the
KMAP defined for the widget (see kbd.man).  If a key binding is detected in
the KMAP, the key function bound to that key binding will be called as
follows:

	int ufunction(int stat,Widget *z,void *arg,int key,int state,
                      int x,int y,Widget *org)

	Where: stat is zero.
               arg is the arg setting placed by kadd().
	       key, state, x, y, and org are the same as above.
	       z is the object containing the key binding.

	See edit.c for example code on how to set up KMAP.  Normally this is
the final destination of the event, but the key function can optionally call
doevent() with either a simulated event or even the same event which was
delivered to the key function.  The 'root' argument for doevent() selects
how close to root userevent() will look for an intercepting parent.  This
can be useful for sending an event to a child which is normal intercepted by
the parent.

Modal dialogues

	modal() and modalpop() are for limiting event delivery to one widget
and its kids.  This is useful for making so called "modal" dialogue widgets
which must be answered before any other events are delivered to the rest of
the program.  The effected events are the user events; KeyPress,
MotionNotify, ButtonPress and ButtonRelease.  modal() and modalpop()
actually implement a stack, so that if a modal dialogue pops up another
dialogue, it can be modal as well (and be able to return to the original
dialogue).

Grabbing

	Grabbing is similar in concept to modal dialogues, but the events
are limited to our program- all other programs running on the X screen can
not get mouse clicks or keyboard input while our grab is in place.  Grabs
are useful for implementing menus.
	The type of the grab is either greedy or non-greedy depending on the
value passed to 'flg' in grab() or greedygrab().  If a grab is greedy, all
events are delivered to the widget.  If a grab is non-greedy, only
ButtonPress, ButtonRelease, and KeyPress are redirected.  Greedy grabs are
especially useful for preventing enter and leave notify events from being
delivered.  Enter and Leave are used to trigger cascade buttons in menus,
but you don't want this behaviour once the user has released the mouse
button, and changed the menu to a trigger-on-click, instead of
trigger-on-release.
	Like modal(), grabs are implemented as a stack, I.E., so that
sub-menus can grab the input.  zapgrab(), zapto() and grabunwind() pop one,
several or all grabs off the stack.  grabpop() pops one grab off the stack
but also delivers the event to wherever it would have gone had the grab not
been in place.  This is useful for when the user clicks on another
application- the menu can be dismissed, and the click will then go to the
application as usual.
