               Typesetting System for Zebra-140 Label Printer

This program allows you to create a database of labels ready to print.  For
example, it could be used to create product labels for each type of item in
your inventory.

The input looks like this.  At the beginning are some macro definitions
which are used for the items which follow.

        [save sml upccode]
        [offset 20][width 260]
        [save f1][font 7 30 30][]
        [save f5][font 7 28 28][]
        [f5]~[arg1]~
        [font 7 24 21] 
        [upc [upccode]]
        [font 7 24 21] 
        [f1]~[arg2]~
        []
        :ST208:Stock Basket:ST208:
        [sml 72418831160]
        :AA208:Summer Annual Basket:AA208:
        [sml 72418830008]
        :PO8:8"Poinsettia:PO8:
        [sml 72418812010]
	...

The output looks like this:

        ST208:Stock Basket:ST208:
        ^FT76,23^CF0,28,28^FDStock Basket^FS^FT20,49^CF0,21,24^FD ^FS^FO55,56^BUN,100^FD72418831160^FS^FT20,173^FD ^FS^FT112,204^CF0,30,30^FDST208^FS^XZ
        AA208:Summer Annual Basket:AA208:
        ^FT15,23^CF0,28,28^FDSummer Annual Basket^FS^FT20,49^CF0,21,24^FD ^FS^FO55,56^BUN,100^FD72418830008^FS^FT20,173^FD ^FS^FT111,204^CF0,30,30^FDAA208^FS^XZ
        PO8:8"Poinsettia:PO8:
        ^FT79,23^CF0,28,28^FD8"Poinsettia^FS^FT20,49^CF0,21,24^FD ^FS^FO55,56^BUN,100^FD72418812010^FS^FT20,173^FD ^FS^FT125,204^CF0,30,30^FDPO8^FS^XZ



form.c		The typesetter
fnt.c		Program to generate a font from 'fnt.src'
genpsion.c	Program to generate files for Psion Organizer II
dld, xx		Script to send a file to the Psion
direct.c	Program for directly connected zebra
zebra		Program for Psion II to run the zebra


                          Label Typesetting System


A label source file contains a set of label definitions, each in the
following format:

:CODE:x:y:z...			# Define a label
body				# The text to be printed

CODE is the code you type into the Psion to bring up the label.  X, y, etc.
are displayed on the screen of the Psion after you enter the code to verify
that you have the correct label.

Also, the fields x, y, z, etc. may be used in the text of the label by
putting [arg1], [arg2], [arg3], etc. in the text of the label.

Text in the body of the label is printed as-is, with the exception of these 
formatting control sequences:


[save name args] ... []		# Save some text
				# 'args' is a list of substitution
				# parameters.  For example, if
				# [save x q]my name is [q][] is retreived
				# with [x joe], the text 'my name is joe'
				# is generated.

[name args]			# Retreive text

[fill]				# Fill remainder of line as a paragraph

[indent n]text			# Indent paragraph/text by n chars

text~text~text			# Center/Justify text
text~				# Left justified
~text				# Right justified
~text~				# Centered
left~right			# Left and right justified
~x~y~				# Two columns

[upc code]			# Print bar code

[offset amnt]			# Set offset from left edge of label

[width amnt]			# Set width of label

[font n width height]		# Select font and size of font
				# Width and height multiply the normal width
				# and height of the font- except for the
				# variable width fonts (7 & 8); where they
				# set the actual size

0 - 6	Are normal fixed width fonts
7       Is the variable width font
8	Is a variable width font width (c) and (r) as A and B
9	Is the user defined font

Special characters:

\2	1/2
\3	3/4
\4	1/4
\7	1 (footnote indicator)
\8	2 (footnote indicator)
\9	3 (footnote indicator)
\$	cents
\'	small degrees
\"	large degrees
\.	small dot
\*	big dot
\+	+/-
\r	registered
\c	copyright
\!	upside down !
\?	upside down ?
\a \e \i \o \u \A \E \I \O \U	Vowels with accents
\n \N	Ns with tildes
